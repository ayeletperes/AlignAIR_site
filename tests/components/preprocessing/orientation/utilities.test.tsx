import { runModel, inspectModel, fixOrientation } from '@components/preprocessing/orientation/utilities';
import { getFilePath } from '@components/utilities/getFilePath';
import * as onnx from 'onnxruntime-web';


// NOTE: testing more sequences takes longer time because of the expect().equal() function
describe('Orientation Pipeline Test', () => {
    let pipeline: onnx.InferenceSession;

    beforeAll(async () => {
        pipeline = await onnx.InferenceSession.create(getFilePath('/models/heavychain_ornt_pipeline.onnx'));
    });

    const testSequences = [
        'AGAACCCGTCCCTCAAGAGTCGGGTCACCNTATCAATAGACAAGTCCGAGAGCCAGTTCTCTCTGAAGCTGAGCTCTGTGACTGCCGCGGACACGGCCGTCTGTTCCTGTGCGAGATTCCATATGATAATTGAAAGTCTGCTTTGACCACTGGGACAAGGAAAACCTGGTCNCCGTCTCTTCAGNCTTCTACGACGGAC',
        'CGCCTNCGGACCCCTCTGCCACTGGGCCCAATGGACCGGGGTCAAGACCTTCACAACGTTATANGTAAGCAACGGTTCATGTGGTTAATTGCCGGCAAGGGAGCCAAAAGTCCGGGGGGTAANAGTGTATGCNGCACAAGAAAGTGAGTACAGACCTCTACCACTCAGACGGAAAGTGGCTGCGTCGTACAGGACAGCGCATTGACAATCAAAAAGAANATTATACCGATTAGGTGAGGTCGGGAAAGGGCCTTCCGACAGCCTGGGTCACGTGTCGTCTCAATTACTTCNACTCGGGTCTCCGACGTGTCCTCTCAAAGTCCCTGGGGGGTCCGGCCTGGTTCAGAGAGGGCCTGAGGTGGTTGCCGTGAAGTGGACGTGANTTTCCGGGAA',
        'CAAGACCGATAGGCCCTTGGTAGACGTCTGAGGGGACGGTGACCAGGGTGACCTGGNCCCAGTGCTGGAGGNTTGGGGATTCCATCGACGATCTNCACAAATTCGGGTACAATAAGACACGGCCGTGGCTGCGGTTCTCAGGCTGTTAANTTTTAAATACGCCGTGTGCTTTGAATCATTTCTGGAGATGGTGAATATGCCTTTCACCGAGATAGNATAATTCGTCGCACAAGTGTTAGATTTTTTTCTAGTATGGCCAANCCANTCCAGTTCTTTCCCGCAAGTCTGGCGGACCCACGGCAGAGAAGAGCCACTGAGGCTGATCTCAGAGCCTGCACCGCAGAGATTGAGGGAGCCACCAGGCTGGACCAAGTTTTTCCCGGACCCCACCAGGTGCATCTCGGCATGGCGTCTCAAGTTGACGTCNCTTGTGCCCGGTACCCTTTCTNTGGACCAACCGTAGGTGATCTCA',
        'AAGGTGCAGCTGGTAGAGTCTGGGGGAGGCTTGGTTCAGCCTGGAAGGTCCCTGAGACTCTCCTGTGCAGCCTCTTGATTCACCCTCAATAGCTATGCCATGCACCGGGTCCGCCAGGCTCCAGGCAANGGGCTGGAGTGGCTGGCANTTCTATCATATGATGGAAGTAATAGATCCTATGCAGACACCATGAAGGCCCGACTCACCATTTCCAGAGACAATTGCAANAACANGCTTTATATGCAAGTTAACAGCCTGNGACGTGAGGACACGGCTGTATATTAGTGTGCGAGGGGACTCCTAAGGTCCATAGCATCTGCTAGACTTTGACTACCGGGGCCAGGGAAACCTGGTCACCNTCTCCTCAGACTTCCACCAGGGGCCCATCGGTNTTCCC',
        'CCCTTGGTGGAGGCCTGAGGAGACGGTGACCAGGGTTCCCTGGCCCCAGTAGTCAAAGTTTTCANCGTAGTCATTTCTCACACAGTAATACACAGCCATGTCCTCGGCTCTCCGTCTGTTCTTTTGCAGATACAGGGAGTTNCTGGAATTGTCTCTGGAGATGATGAATCGGCGCTTCACGGAGTCCACATAGTGAGTCCTACTGCCACTCCAACTAACACCNGATACCCACTCCAGCCCCTTTCCTGGAGCCTTGNAGGCCCAGTTCATGTCANTGTTACTGAAGGTGAATCCAGAGGCTGCACAGGAGAGTCTCAGGGACCCCCNAGGCTGTACCAAGCCTCCCNCAGACTCCACCAGCTGCACCTC',
        'CCGTCACCACTGTGTTTGATGTGTGTCTTCAAGGTCCGTTCTCAGTGGTAATGGTCGCGACACAGGTGTTCGTGTCGCATGTACCTTGACTCGTCCGATTCTAGGCTCCTGTGCCGGCACATAATGACACGCAGTCCCGAGGNCGATAGGACCCCCTACGCGGAGGGCCAAGCTGGGNACCCCGGTCCNTTGGGNCCAGTGGCAGAGGAGTCCGGAGGTGGTTCCC',
        'GGGGAAGACCGATGGGCCCTTGGTGGAAGCCTGAGGNGGCAGTGACTAGGGTATTACGGCCTGAGAGCTCGAAGTGCCAGCCTGTAGTACCAGCTGNTGCTATTCGGGCTCAGTAATACAGAGCAGTATCNTTGGATNTGAGGCTGACCATTTGCAGCTACAGTGAGTTCTCCGCCTTGGATCACGATATAGTGACTTGGNACTTCACTGAGTCTGCGTAGTATGACGTACTACCCCTATTACAAATAGGCGAGATCCAATATCGACCCTCACCACACGCCTGGCGGACGCAGTTCACGCTATAGGNACGTAACTTGCAGACAGATCTTGCGCAGGAGAGTCTTAGGCATCCCCGACGCCTGCCCCGGCCTCCCCCAGACTCCAACANCCTGACATCCCCTTATGCCTGCCATCCAGACATTATTTTAATCCAGATTTTTACAACGCTAGCGCCCCANGAGCTACAGTATAACAAGCGGCNTACTTCACGTGCTTAACTNGTAATCGCGCCCGCTAACGTTCACGATGTCGTTCCTAGGT',
        'GGGAACCACCTCCGGACAAATCNGTCACTGGACCCACGGTGACTCGGTGAGTATCTTTATACTGCCCCCTTTGGGGTGATTCGGGCCAGGCATTGAGAGATTGTCAAACCGCGCCGACCCTGGGGACTGACATNCGATGACTGCGGATGTCTACGGAAACATTGTNTACACAGGAACCTTTTCAGTTTGTCNGGACACTT',
        'AGTCTCTTCCAGAGGACGTTCCGAAGACCTAAGTGGAAANGATCGAGACGACACGNCAACCACGCTGGCTGAGCACCTGTTGAGGAACTCACCTATCCTACCTAGCAGCAACCGTCACCATTGAGTTNGATGCGTGTCTGCAAGGTCCTTTNTCAGTGGTAATGGTCCCTGTACAGGNGTTCGTGTCGGATGTACCTCGACTCGTCGGACTCTAGGCTCCTNTGCCGGCACATAATGGCACGCCGTCAACCCAGAACTTCACCTATGTCGTCCCCCCTGGTACGAAAACTATAAACCCCTTTTCCCTGTTACCAGTGGCAGAGATTTCCGAAGGTGGTTCCCGGGTAGCCAGAAGGNGGAC',
        'CCGCGAGGCCAAGCACGAANCGTCCTCCGGTTAGTATACAAGACCTTAGGATATCTCTAGAGTGCCCCCCCTAGTTNGGACTAAACTCCCACTTCGNTTTCCTCAGGTCGAGTCCTGANCGCTTCGTAAGTGNCCGAGACAAGGTGCGGAGATTACAGAATACAGAGAGGTCGACCTCACCAGAAGAGTTACCCTGCTTCTACGCGGTCGGTTGAGCCTTCCCTGAANTCGACCAACGATCCTATCTAGGGTAACTCTCGTGGTTGTTGTGGGCGAGGGAGTTCTCCGCTCTGCGGCACTGTGATCTGTGCACGTGCTTGGTAAAGGAGGCCGTGCACTTNAGACCCCGGCGGCTTCTGTGCCGGCACTTAAAAACACGCTCTTTCCGAACATACATACCNCGCAANCTTTAGACCCCGGGACCGGGATATCACTGTCAGGTATGACCGGAGGTGGTTCCCGGGTAGCCA'
    ];

    const testLabels = [
        'Normal',
        'Reversed',
        'Reverse Complement',
        'Normal',
        'Reverse Complement',
        'Complement',
        'Reverse Complement',
        'Reversed',
        'Complement',
        'Complement',
    ];

    const expectedSequences = [
        'AGAACCCGTCCCTCAAGAGTCGGGTCACCNTATCAATAGACAAGTCCGAGAGCCAGTTCTCTCTGAAGCTGAGCTCTGTGACTGCCGCGGACACGGCCGTCTGTTCCTGTGCGAGATTCCATATGATAATTGAAAGTCTGCTTTGACCACTGGGACAAGGAAAACCTGGTCNCCGTCTCTTCAGNCTTCTACGACGGAC',
        'AAGGGCCTTTNAGTGCAGGTGAAGTGCCGTTGGTGGAGTCCGGGAGAGACTTGGTCCGGCCTGGGGGGTCCCTGAAACTCTCCTGTGCAGCCTCTGGGCTCANCTTCATTAACTCTGCTGTGCACTGGGTCCGACAGCCTTCCGGGAAAGGGCTGGAGTGGATTAGCCATATTANAAGAAAAACTAACAGTTACGCGACAGGACATGCTGCGTCGGTGAAAGGCAGACTCACCATCTCCAGACATGAGTGAAAGAACACGNCGTATGTGANAATGGGGGGCCTGAAAACCGAGGGAACGGCCGTTAATTGGTGTACTTGGCAACGAATGNATATTGCAACACTTCCAGAACTGGGGCCAGGTAACCCGGGTCACCGTCTCCCCAGGCNTCCGC',
        'TGAGATCACCTACGGTTGGTCCANAGAAAGGGTACCGGGCACAAGNGACGTCAACTTGAGACGCCATGCCGAGATGCACCTGGTGGGGTCCGGGAAAAACTTGGTCCAGCCTGGTGGCTCCCTCAATCTCTGCGGTGCAGGCTCTGAGATCAGCCTCAGTGGCTCTTCTCTGCCGTGGGTCCGCCAGACTTGCGGGAAAGAACTGGANTGGNTTGGCCATACTAGAAAAAAATCTAACACTTGTGCGACGAATTATNCTATCTCGGTGAAAGGCATATTCACCATCTCCAGAAATGATTCAAAGCACACGGCGTATTTAAAANTTAACAGCCTGAGAACCGCAGCCACGGCCGTGTCTTATTGTACCCGAATTTGTGNAGATCGTCGATGGAATCCCCAANCCTCCAGCACTGGGNCCAGGTCACCCTGGTCACCGTCCCCTCAGACGTCTACCAAGGGCCTATCGGTCTTG',
        'AAGGTGCAGCTGGTAGAGTCTGGGGGAGGCTTGGTTCAGCCTGGAAGGTCCCTGAGACTCTCCTGTGCAGCCTCTTGATTCACCCTCAATAGCTATGCCATGCACCGGGTCCGCCAGGCTCCAGGCAANGGGCTGGAGTGGCTGGCANTTCTATCATATGATGGAAGTAATAGATCCTATGCAGACACCATGAAGGCCCGACTCACCATTTCCAGAGACAATTGCAANAACANGCTTTATATGCAAGTTAACAGCCTGNGACGTGAGGACACGGCTGTATATTAGTGTGCGAGGGGACTCCTAAGGTCCATAGCATCTGCTAGACTTTGACTACCGGGGCCAGGGAAACCTGGTCACCNTCTCCTCAGACTTCCACCAGGGGCCCATCGGTNTTCCC',
        'GAGGTGCAGCTGGTGGAGTCTGNGGGAGGCTTGGTACAGCCTNGGGGGTCCCTGAGACTCTCCTGTGCAGCCTCTGGATTCACCTTCAGTAACANTGACATGAACTGGGCCTNCAAGGCTCCAGGAAAGGGGCTGGAGTGGGTATCNGGTGTTAGTTGGAGTGGCAGTAGGACTCACTATGTGGACTCCGTGAAGCGCCGATTCATCATCTCCAGAGACAATTCCAGNAACTCCCTGTATCTGCAAAAGAACAGACGGAGAGCCGAGGACATGGCTGTGTATTACTGTGTGAGAAATGACTACGNTGAAAACTTTGACTACTGGGGCCAGGGAACCCTGGTCACCGTCTCCTCAGGCCTCCACCAAGGG',
        'GGCAGTGGTGACACAAACTACACACAGAAGTTCCAGGCAAGAGTCACCATTACCAGCGCTGTGTCCACAAGCACAGCGTACATGGAACTGAGCAGGCTAAGATCCGAGGACACGGCCGTGTATTACTGTGCGTCAGGGCTCCNGCTATCCTGGGGGATGCGCCTCCCGGTTCGACCCNTGGGGCCAGGNAACCCNGGTCACCGTCTCCTCAGGCCTCCACCAAGGG',
        'ACCTAGGAACGACATCGTGAACGTTAGCGGGCGCGATTACNAGTTAAGCACGTGAAGTANGCCGCTTGTTATACTGTAGCTCNTGGGGCGCTAGCGTTGTAAAAATCTGGATTAAAATAATGTCTGGATGGCAGGCATAAGGGGATGTCAGGNTGTTGGAGTCTGGGGGAGGCCGGGGCAGGCGTCGGGGATGCCTAAGACTCTCCTGCGCAAGATCTGTCTGCAAGTTACGTNCCTATAGCGTGAACTGCGTCCGCCAGGCGTGTGGTGAGGGTCGATATTGGATCTCGCCTATTTGTAATAGGGGTAGTACGTCATACTACGCAGACTCAGTGAAGTNCCAAGTCACTATATCGTGATCCAAGGCGGAGAACTCACTGTAGCTGCAAATGGTCAGCCTCANATCCAANGATACTGCTCTGTATTACTGAGCCCGAATAGCANCAGCTGGTACTACAGGCTGGCACTTCGAGCTCTCAGGCCGTAATACCCTAGTCACTGCCNCCTCAGGCTTCCACCAAGGGCCCATCGGTCTTCCCC',
        'TTCACAGGNCTGTTTGACTTTTCCAAGGACACATNTGTTACAAAGGCATCTGTAGGCGTCAGTAGCNTACAGTCAGGGGTCCCAGCCGCGCCAAACTGTTAGAGAGTTACGGACCGGGCTTAGTGGGGTTTCCCCCGTCATATTTCTATGAGTGGCTCAGTGGCACCCAGGTCACTGNCTAAACAGGCCTCCACCAAGGG',
        'TCAGAGAAGGTCTCCTGCAAGGCTTCTGGATTCACCTTTNCTAGCTCTGCTGTGCNGTTGGTGCGACCGACTCGTGGACAACTCCTTGAGTGGATAGGATGGATCGTCGTTGGCAGTGGTAACTCAANCTACGCACAGACGTTCCAGGAAANAGTCACCATTACCAGGGACATGTCCNCAAGCACAGCCTACATGGAGCTGAGCAGCCTGAGATCCGAGGANACGGCCGTGTATTACCGTGCGGCAGTTGGGTCTTGAAGTGGATACAGCAGGGGGGACCATGCTTTTGATATTTGGGGAAAAGGGACAATGGTCACCGTCTCTAAAGGCTTCCACCAAGGGCCCATCGGTCTTCCNCCTG',
        'GGCGCTCCGGTTCGTGCTTNGCAGGAGGCCAATCATATGTTCTGGAATCCTATAGAGATCTCACGGGGGGGATCAANCCTGATTTGAGGGTGAAGCNAAAGGAGTCCAGCTCAGGACTNGCGAAGCATTCACNGGCTCTGTTCCACGCCTCTAATGTCTTATGTCTCTCCAGCTGGAGTGGTCTTCTCAATGGGACGAAGATGCGCCAGCCAACTCGGAAGGGACTTNAGCTGGTTGCTAGGATAGATCCCATTGAGAGCACCAACAACACCCGCTCCCTCAAGAGGCGAGACGCCGTGACACTAGACACGTGCACGAACCATTTCCTCCGGCACGTGAANTCTGGGGCCGCCGAAGACACGGCCGTGAATTTTTGTGCGAGAAAGGCTTGTATGTATGGNGCGTTNGAAATCTGGGGCCCTGGCCCTATAGTGACAGTCCATACTGGCCTCCACCAAGGGCCCATCGGT'
    ];

    // it('should show the input and output of the model', async () => {
    //     await inspectModel(getFilePath('/models/heavychain_ornt_pipeline.onnx'));
    // });
    
    it('should predicted sequences orientations', async () => {
        // Run the model to get predicted orientations
        const start = performance.now();
        const orientations = await runModel(pipeline, testSequences);
        const end = performance.now();
        console.log(`Time to predict orientation for sequence: ${(end - start).toFixed(2)} ms`);
        // Check that orientations match the expected testLabels
        expect(orientations).toEqual(testLabels);
    });

    it('should process sequences based on predicted sequences orientations', async () => {
        // Run the model to get predicted orientations
        let start = performance.now();
        const fixedSequences = await fixOrientation(pipeline, testSequences);
        let end = performance.now();
        console.log(`Time to fix sequence: ${(end - start).toFixed(2)} ms`);
        // Check that orientations match the expected testLabels
        expect(fixedSequences).toEqual(expectedSequences);
    });
});
